{"version":3,"sources":["Constants.js","components/ModeSelector.js","components/TextInput.js","components/SliderInput.js","components/ParameterSelector.js","components/ResultCard.js","components/ResultCards.js","App.js","reportWebVitals.js","index.js"],"names":["SamplerState","GenerationType","TabModes","ModeSelector","mode","onModeChanged","Paper","square","Tabs","value","indexOf","indicatorColor","textColor","variant","onChange","event","newMode","Tab","label","useStyles","makeStyles","theme","root","display","alignItems","flex","input","marginLeft","spacing","iconButton","padding","divider","height","margin","generateButtonText","marginRight","circularProgress","TextInput","wait","generationType","onTextSubmit","classes","useState","setValue","promptTag","component","className","InputBase","multiline","placeholder","target","Divider","orientation","Button","disabled","trim","color","onClick","Typography","CircularProgress","size","slider","paddingLeft","paddingRight","numberInput","width","SliderInput","min","max","step","initial","onChangesCommitted","onValidateInput","useEffect","Grid","container","direction","item","xs","Slider","valueLabelDisplay","onChangeCommitted","Number","onBlur","validated","inputProps","type","paper","selectorControl","captions","maxWidth","getUsableModels","window","ModelConfig","continuationModels","promptModels","generateSequenceMarks","Array","keys","map","x","toString","ParameterSelector","parameters","onParametersChanged","usableModels","setUsableModels","model","setModel","params","setParams","initialMaxLength","setInitialMaxLength","initialMinLength","setInitialMinLength","generateSequenceCount","setGenerateSequenceCount","Object","align","gutterBottom","FormControl","Select","display_name","MenuItem","FormHelperText","Math","round","defaultValue","marks","textField","textRenderArea","whiteSpace","wordBreak","ResultCard","cardActions","samplerName","prompt","text","onEditModeChange","onEditText","onGenerate","onStopGenerate","editText","setEditText","TextField","CardActions","Slide","in","mountOnEnter","unmountOnExit","Card","CardContent","k","join","defaultProps","editMode","h3","marginTop","li","marginBottom","ResultCards","samplers","onSamplerChanged","onStartGenerate","onModelParametersPresetChanged","Set","editModeSamplers","setEditModeSamplers","editModeEnabled","newSet","add","delete","generatedText","sampler","state","console","log","items","slice","reverse","has","id","belongingTask","originalPrompt","modelParams","modelName","length","appear","Task","tasksCreated","prefix","model_params","new_task","get_new_id","tasks","Sampler","samplersCreated","belonging_task","new_sampler","grid","initMsgBox","paddingBottom","textAlign","disconnectedSnackBar","App","socket","setSocket","setSamplers","waitingTask","setWaitingTask","setParameters","setModelName","setGenerationType","useSnackbar","enqueueSnackbar","closeSnackbar","onGenerateCompleted","task_name","results","task","result","create_sampler","hasOwnProperty","onText","sampler_name","sampled_text","callback","onTextSampleCompleted","onDisconnect","reason","autoHideDuration","useCallback","APILocation","io","on","transitionDuration","enter","exit","Container","Box","p","new_continuation_task","new_prompt_task","emit","Fade","Alert","severity","AlertTitle","presetName","preventDuplicate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","maxSnack","anchorOrigin","horizontal","vertical","document","getElementById"],"mappings":"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","file":"static/js/main.093445a1.chunk.js","sourcesContent":["export const SamplerState = {\r\n    stopped: \"stopped\", // Sampler not running on the server\r\n    waiting: \"waiting\", // Sampler created on server, waiting for first output\r\n    running: \"running\", // Sampler generating output\r\n    stopwait: \"stopwait\" // Sampler waiting to a stop\r\n};\r\n\r\nexport const GenerationType = {\r\n    continuation: 'continuation',\r\n    prompt: 'prompt'\r\n};","import Paper from \"@material-ui/core/Paper\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects';\r\nimport {GenerationType} from \"../Constants\";\r\n\r\nconst TabModes = [GenerationType.continuation, GenerationType.prompt];\r\n\r\nconst ModeSelector = ({mode, onModeChanged}) => {\r\n\r\n    const onModeChange = (event, newMode) => {\r\n        onModeChanged(TabModes[newMode]);\r\n    };\r\n\r\n    return (\r\n        <Paper square>\r\n            <Tabs\r\n                value={TabModes.indexOf(mode)}\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n                variant=\"fullWidth\"\r\n                onChange={onModeChange}\r\n            >\r\n                <Tab label={<><CreateIcon />Continue Story</>} />\r\n                <Tab label={<><EmojiObjectsIcon />Writing Prompt</>} />\r\n            </Tabs>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default ModeSelector;","import {useState} from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects';\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {GenerationType} from \"../Constants\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flex: 1,\r\n    },\r\n    input: {\r\n        marginLeft: theme.spacing(1),\r\n        flex: 1,\r\n    },\r\n    iconButton: {\r\n        padding: 10,\r\n    },\r\n    divider: {\r\n        height: 28,\r\n        margin: 4,\r\n    },\r\n    generateButtonText:{\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    circularProgress:{\r\n        marginLeft: theme.spacing(0.5),\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst TextInput = ({wait, generationType, onTextSubmit}) => {\r\n    const classes = useStyles();\r\n    const [value, setValue] = useState(\"\");\r\n    // Low priority TODO: Support multiple promptTags\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [promptTag, setPromptTag] = useState(\"[WP] \");\r\n\r\n    const onSubmit = () => {\r\n        if (value.trim()) {\r\n            if (generationType === GenerationType.prompt) {\r\n                onTextSubmit(value, promptTag);\r\n            } else {\r\n                onTextSubmit(value, \"\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const onChange = (event) => {\r\n        setValue(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <Paper component=\"form\" className={classes.root}>\r\n            <InputBase\r\n                multiline\r\n                className={classes.input}\r\n                placeholder=\"Enter some text here...\"\r\n                onChange={onChange}\r\n            />\r\n            <Divider className={classes.divider} orientation=\"vertical\"/>\r\n            <Button\r\n                disabled={wait || !value.trim()}\r\n                color=\"primary\"\r\n                className={classes.iconButton}\r\n                onClick={onSubmit}\r\n            >\r\n                <Typography variant=\"button\" className={classes.generateButtonText}><b>Generate</b></Typography>\r\n                {wait ? <CircularProgress className={classes.circularProgress} size={20}/> : (\r\n                    generationType === GenerationType.prompt ? <EmojiObjectsIcon/> : <CreateIcon/>\r\n                )}\r\n            </Button>\r\n        </Paper>\r\n    )\r\n};\r\n\r\nexport default TextInput;","import {makeStyles} from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Input from \"@material-ui/core/Input/Input\";\r\nimport {useState, useEffect} from \"react\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    slider: {\r\n        paddingLeft: theme.spacing(0.5),\r\n        paddingRight: theme.spacing(1)\r\n    },\r\n    numberInput: {\r\n        width: 48\r\n    }\r\n}));\r\n\r\nconst SliderInput = ({min, max, step, initial, onChangesCommitted, onValidateInput}) => {\r\n    const classes = useStyles();\r\n    const [value, setValue] = useState(initial);\r\n\r\n    /* When initial value changes, reset the control */\r\n    useEffect(()=>{\r\n        setValue(initial);\r\n    }, [initial]);\r\n\r\n    return (\r\n        <div className={classes.slider}>\r\n            <Grid container spacing={2} direction=\"row\" alignItems=\"center\">\r\n                <Grid item xs>\r\n                    <Slider\r\n                        value={typeof value === 'number' ? value : min}\r\n                        valueLabelDisplay=\"auto\"\r\n                        step={step}\r\n                        min={min}\r\n                        max={max}\r\n                        onChange={(event, value)=>{\r\n                            setValue(value);\r\n                        }}\r\n                        onChangeCommitted={(event, value) => {\r\n                            onChangesCommitted(value);\r\n                        }}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Input\r\n                        margin=\"dense\"\r\n                        className={classes.numberInput}\r\n                        value={value}\r\n                        onChange={(event)=>{\r\n                            setValue(event.target.value === '' ? '' : Number(event.target.value));\r\n                        }}\r\n                        onBlur={()=>{\r\n                            let validated = value;\r\n                            if (typeof validated !== 'number') {\r\n                                validated = min;\r\n                            }\r\n                            validated = onValidateInput(validated);\r\n                            setValue(validated);\r\n                            onChangesCommitted(validated);\r\n                        }}\r\n                        inputProps={{\r\n                            step: step,\r\n                            min: min,\r\n                            max: max,\r\n                            type: 'number'\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SliderInput;","import {makeStyles} from \"@material-ui/core\";\r\nimport {useState, useEffect} from 'react'\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport {GenerationType} from \"../Constants\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport SliderInput from \"./SliderInput\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: theme.spacing(2)\r\n    },\r\n    slider: {\r\n        paddingLeft: theme.spacing(0.5),\r\n        paddingRight: theme.spacing(1)\r\n    },\r\n    selectorControl: {\r\n        width: \"100%\",\r\n    },\r\n    captions: {\r\n        maxWidth: 200\r\n    }\r\n}));\r\n\r\nconst getUsableModels = (generationType) => {\r\n    switch (generationType) {\r\n        case GenerationType.continuation:\r\n            return (window.ModelConfig.continuationModels);\r\n        case GenerationType.prompt:\r\n            return (window.ModelConfig.promptModels);\r\n        default:\r\n            return ({});\r\n    }\r\n};\r\n\r\nconst maxGeneratedSequences = 5;\r\nconst generateSequenceMarks = [...Array(maxGeneratedSequences).keys()].map(x => {\r\n    return {value: x + 1, label: (x + 1).toString()}\r\n});\r\n\r\nconst ParameterSelector = ({generationType, parameters, onParametersChanged}) => {\r\n    const classes = useStyles();\r\n    const [usableModels, setUsableModels] = useState(getUsableModels(generationType));\r\n    const [model, setModel] = useState(\"gpt2\");\r\n    const [params, setParams] = useState(parameters);\r\n    const [initialMaxLength, setInitialMaxLength] = useState(20);\r\n    const [initialMinLength, setInitialMinLength] = useState(10);\r\n    const [generateSequenceCount, setGenerateSequenceCount] = useState(5);\r\n\r\n    const onModelChange = (event) => {\r\n        setModel(event.target.value);\r\n    };\r\n\r\n    /* Triggered when parameters changes */\r\n    useEffect(()=> {\r\n        setParams(parameters);\r\n    }, [parameters]);\r\n\r\n    /* Triggered when generationType changes */\r\n    useEffect(() => {\r\n        /* Change usableModels when generationType changes  */\r\n        let usableModels = getUsableModels(generationType);\r\n        setUsableModels(usableModels);\r\n        setModel(usableModels[Object.keys(usableModels)[0]]);\r\n    }, [generationType]);\r\n\r\n    /* Triggered when any parameters in the selector changes */\r\n    useEffect(() => {\r\n        /* Update parameters */\r\n        onParametersChanged(model, params, initialMinLength, initialMaxLength, generateSequenceCount);\r\n    }, [onParametersChanged, model, params, initialMinLength, initialMaxLength, generateSequenceCount]);\r\n\r\n    return (\r\n        <Grid container spacing={2} direction=\"column\" alignItems=\"stretch\">\r\n            <Grid item>\r\n                <Paper className={classes.paper}>\r\n                    <Typography variant=\"h5\" component=\"h2\" align=\"left\">\r\n                        Parameters\r\n                    </Typography>\r\n                    <Typography variant=\"caption\" display=\"block\" align=\"justify\" color={\"textSecondary\"}\r\n                                className={classes.captions} gutterBottom>\r\n                        Apply only to new stories\r\n                    </Typography>\r\n                    <Grid container spacing={2} direction=\"column\" alignItems=\"stretch\" className={classes.root}>\r\n                        <Grid item>\r\n                            <Typography variant=\"body2\" align=\"left\">\r\n                                Model to Use:\r\n                            </Typography>\r\n                            <FormControl className={classes.selectorControl}>\r\n                                <Select\r\n                                    value={model}\r\n                                    onChange={onModelChange}\r\n                                >\r\n                                    {Object.keys(usableModels).map(display_name => {\r\n                                        return (\r\n                                            <MenuItem\r\n                                                key={display_name + usableModels[display_name]}\r\n                                                value={usableModels[display_name]}\r\n                                            >\r\n                                                {display_name}\r\n                                            </MenuItem>\r\n                                        )\r\n                                    })}\r\n                                </Select>\r\n                                <FormHelperText>Select a model to generate text</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant=\"body2\" align=\"left\">\r\n                                Temperature:\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" display=\"block\" align=\"justify\" color={\"textSecondary\"}\r\n                                        className={classes.captions} gutterBottom>\r\n                                Control the randomness of the generated text.\r\n                                Lowering the value produces less random and more coherent results.\r\n                                Increasing the value produces more random and less repetitive results.\r\n                            </Typography>\r\n                            <SliderInput\r\n                                min={0.5}\r\n                                max={1.5}\r\n                                initial={\r\n                                    (typeof params['temperature'] !== \"undefined\") ? params['temperature'] : 1\r\n                                }\r\n                                step={0.01}\r\n                                onChangesCommitted={(value) => {\r\n                                    setParams({...params, 'temperature': value})\r\n                                }}\r\n                                onValidateInput={(value) => {\r\n                                    if (value < 0.001) {\r\n                                        return 0.01\r\n                                    } else if (value >= 3) {\r\n                                        return 3\r\n                                    } else {\r\n                                        return value\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant=\"body2\" align=\"left\">\r\n                                Top-p Sampling:\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" display=\"block\" align=\"justify\" color={\"textSecondary\"}\r\n                                        className={classes.captions} gutterBottom>\r\n                                Nucleus sampling, select the\r\n                                least amount of tokens that\r\n                                combines to a probability of p.\r\n                                Set 1 to disable top p sampling.\r\n                            </Typography>\r\n                            <SliderInput\r\n                                min={0.01}\r\n                                max={1}\r\n                                initial={(typeof params['top_p'] !== \"undefined\") ? params['top_p'] : 1}\r\n                                step={0.01}\r\n                                onChangesCommitted={(value) => {\r\n                                    setParams({...params, 'top_p': value})\r\n                                }}\r\n                                onValidateInput={(value) => {\r\n                                    if (value < 0.001) {\r\n                                        return 0.01\r\n                                    } else if (value >= 1) {\r\n                                        return 1\r\n                                    } else {\r\n                                        return value\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant=\"body2\" align=\"left\">\r\n                                Top-k Sampling:\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" display=\"block\" align=\"justify\" color={\"textSecondary\"}\r\n                                        className={classes.captions} gutterBottom>\r\n                                Select at most k tokens only\r\n                                Set 1 for greedy sampling.\r\n                                Set 0 to disable top k sampling\r\n                                which selects unlimited tokens.\r\n                            </Typography>\r\n                            <SliderInput\r\n                                min={0}\r\n                                max={200}\r\n                                initial={(typeof params['top_k'] !== \"undefined\") ? params['top_k'] : 0}\r\n                                step={1}\r\n                                onChangesCommitted={(value) => {\r\n                                    setParams({...params, 'top_k': value})\r\n                                }}\r\n                                onValidateInput={(value) => {\r\n                                    value = Math.round(value);\r\n                                    if (value < 0) {\r\n                                        return 0;\r\n                                    } else {\r\n                                        return value;\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item>\r\n                <Paper className={classes.paper}>\r\n                    <Typography variant=\"h5\" component=\"h2\" gutterBottom align=\"left\">\r\n                        Options\r\n                    </Typography>\r\n                    <Grid container spacing={2} direction=\"column\" alignItems=\"stretch\" className={classes.root}>\r\n                        <Grid item>\r\n                            <Typography variant=\"body2\" align=\"left\">\r\n                                Stories to Generate:\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" display=\"block\" align=\"justify\" color={\"textSecondary\"}\r\n                                        className={classes.captions} gutterBottom>\r\n                                Each time you click \"Generate\"\r\n                            </Typography>\r\n                            <div className={classes.slider}>\r\n                                <Slider\r\n                                    defaultValue={5}\r\n                                    valueLabelDisplay=\"auto\"\r\n                                    step={1}\r\n                                    marks={generateSequenceMarks}\r\n                                    min={1}\r\n                                    max={maxGeneratedSequences}\r\n                                    onChangeCommitted={(event, value) => {\r\n                                        setGenerateSequenceCount(value);\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant=\"body2\" align=\"left\">\r\n                                Minimum Length:\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" display=\"block\" align=\"justify\" color={\"textSecondary\"}\r\n                                        className={classes.captions} gutterBottom>\r\n                                Generate at least {initialMinLength} tokens long\r\n                            </Typography>\r\n                            <div className={classes.slider}>\r\n                                <Slider\r\n                                    defaultValue={10}\r\n                                    valueLabelDisplay=\"auto\"\r\n                                    step={1}\r\n                                    min={1}\r\n                                    max={30}\r\n                                    onChangeCommitted={(event, value) => {\r\n                                        setInitialMinLength(value);\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant=\"body2\" align=\"left\">\r\n                                Pausing Length:\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" display=\"block\" align=\"justify\" color={\"textSecondary\"}\r\n                                        className={classes.captions} gutterBottom>\r\n                                Generate at most {initialMaxLength} tokens before requiring \"Generate More\"\r\n                            </Typography>\r\n                            <div className={classes.slider}>\r\n                                <Slider\r\n                                    defaultValue={20}\r\n                                    valueLabelDisplay=\"auto\"\r\n                                    step={1}\r\n                                    min={1}\r\n                                    max={50}\r\n                                    onChangeCommitted={(event, value) => {\r\n                                        setInitialMaxLength(value);\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default ParameterSelector;","import {useState} from 'react'\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport * as PropTypes from 'prop-types'\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n\r\nconst useStyles = makeStyles({\r\n    textField: {\r\n        width: \"100%\"\r\n    },\r\n    textRenderArea: {\r\n        whiteSpace: \"pre-line\",\r\n        wordBreak: \"break-word\"\r\n    },\r\n});\r\n\r\nconst ResultCard = ({samplerName, mode, prompt, text, model, params, onEditModeChange, onEditText, onGenerate, onStopGenerate}) => {\r\n    const classes = useStyles();\r\n    const [editText, setEditText] = useState(text);\r\n\r\n    let textRenderArea, cardActions;\r\n\r\n    const onEditClicked = () => {\r\n        setEditText(text);\r\n        onEditModeChange(samplerName, true);\r\n    };\r\n\r\n    const onCancelEditClicked = () => {\r\n        onEditModeChange(samplerName, false);\r\n    };\r\n\r\n    const onEditTextChange = (event) => {\r\n        setEditText(event.target.value);\r\n    };\r\n\r\n    const onEditConfirm = () => {\r\n        onEditText(samplerName, editText);\r\n    };\r\n\r\n    const onGenerateClick = () => {\r\n        onGenerate(samplerName);\r\n    };\r\n\r\n    const onStopGenerateClick = () => {\r\n        onStopGenerate(samplerName);\r\n    };\r\n\r\n    switch (mode) {\r\n        case 'edit':\r\n            textRenderArea = <TextField\r\n                className={classes.textField}\r\n                defaultValue={text}\r\n                onChange={onEditTextChange}\r\n                multiline\r\n            />;\r\n            cardActions = <CardActions>\r\n                {/* Only disable confirm button when there is no prompt and no generatedText */}\r\n                <Button\r\n                    disabled={(!prompt || !prompt.trim()) && (!editText || !editText.trim())}\r\n                    size=\"small\"\r\n                    color=\"primary\"\r\n                    onClick={onEditConfirm}\r\n                >\r\n                    <b>Confirm</b>\r\n                </Button>\r\n                <Button size=\"small\" color=\"primary\" onClick={onCancelEditClicked}><b>Cancel</b></Button>\r\n            </CardActions>;\r\n            break;\r\n        case 'idle':\r\n            textRenderArea = <Typography\r\n                className={classes.textRenderArea}\r\n                variant=\"body1\"\r\n                align=\"left\"\r\n            >{text}</Typography>;\r\n            cardActions = <CardActions>\r\n                <Button size=\"small\" color=\"primary\" onClick={onGenerateClick}><b>Generate More</b></Button>\r\n                <Button size=\"small\" color=\"primary\" onClick={onEditClicked}><b>Edit</b></Button>\r\n            </CardActions>;\r\n            break;\r\n        case 'waiting':\r\n            textRenderArea = <Typography\r\n                className={classes.textRenderArea}\r\n                variant=\"body1\"\r\n                align=\"left\"\r\n            >{text}</Typography>;\r\n            cardActions = <CardActions>\r\n                <Button disabled size=\"small\" color=\"primary\"><b>Generate More</b></Button>\r\n                <CircularProgress size={20}/>\r\n            </CardActions>;\r\n            break;\r\n        case 'running':\r\n            textRenderArea = <Typography\r\n                className={classes.textRenderArea}\r\n                variant=\"body1\"\r\n                align=\"left\"\r\n            >{text}</Typography>;\r\n            cardActions = <CardActions>\r\n                <Button size=\"small\" color=\"secondary\" onClick={onStopGenerateClick}><b>Stop Generation</b></Button>\r\n            </CardActions>;\r\n            break;\r\n        case 'stopwait':\r\n            textRenderArea = <Typography\r\n                className={classes.textRenderArea}\r\n                variant=\"body1\"\r\n                align=\"left\"\r\n            >{text}</Typography>;\r\n            cardActions = <CardActions>\r\n                <Button disabled size=\"small\" color=\"secondary\"><b>Stop Generation</b></Button>\r\n                <CircularProgress size={20}/>\r\n            </CardActions>;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return (\r\n        <Slide direction=\"left\" in={true} mountOnEnter unmountOnExit>\r\n            <Card>\r\n                <CardContent>\r\n                    <Typography variant=\"body2\" align=\"right\" color=\"textSecondary\">\r\n                        {[...Object.keys(params).map(k => `${k}=${params[k]}`), `model=${model}`].join(\", \")}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" align=\"left\" color=\"textSecondary\">\r\n                        Story {samplerName}:\r\n                    </Typography>\r\n                    {\r\n                        (prompt) &&\r\n                        <Typography variant=\"body2\" align=\"left\" color=\"textSecondary\">\r\n                            {prompt}\r\n                        </Typography>\r\n                    }\r\n                    {textRenderArea}\r\n                </CardContent>\r\n                <Divider orientation={'horizontal'}/>\r\n                {cardActions}\r\n            </Card>\r\n        </Slide>\r\n    )\r\n};\r\n\r\nResultCard.defaultProps = {\r\n    editMode: false,\r\n    text: '',\r\n};\r\n\r\nResultCard.propTypes = {\r\n    editMode: PropTypes.bool,\r\n    text: PropTypes.string,\r\n};\r\n\r\nexport default ResultCard;","import {useState} from 'react'\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ResultCard from \"./ResultCard\";\r\nimport {GenerationType, SamplerState} from \"../Constants\";\r\nimport Slide from \"@material-ui/core/Slide/Slide\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: theme.spacing(2)\r\n    },\r\n    h3: {\r\n        marginTop: 16\r\n    },\r\n    li: {\r\n        marginBottom: 10\r\n    }\r\n}));\r\n\r\nconst ResultCards = ({samplers, onSamplerChanged, onStartGenerate, onModelParametersPresetChanged}) => {\r\n    // eslint-disable-next-line no-unused-vars\r\n    const classes = useStyles();\r\n    const [editModeSamplers, setEditModeSamplers] = useState(new Set());\r\n\r\n    const onEditModeChange = (samplerName, editModeEnabled) => {\r\n        let newSet = new Set(editModeSamplers);\r\n        if (editModeEnabled) {\r\n            newSet.add(samplerName);\r\n        } else {\r\n            newSet.delete(samplerName);\r\n        }\r\n        setEditModeSamplers(newSet);\r\n    };\r\n\r\n    const onEditText = (samplerName, text) => {\r\n        samplers[samplerName].generatedText = text;\r\n        onEditModeChange(samplerName, false);\r\n        onSamplerChanged();\r\n    };\r\n\r\n    const onGenerate = (samplerName) => {\r\n        onStartGenerate(samplerName);\r\n    };\r\n\r\n    const onStopGenerate = (samplerName) => {\r\n        let sampler = samplers[samplerName];\r\n        if (sampler.state !== SamplerState.running) {\r\n            console.log(\r\n                `WARN: Sampler ${samplerName} is in not in running state (${sampler.state}). Stop command ignored.`\r\n            );\r\n            return\r\n        }\r\n        samplers[samplerName].state = SamplerState.stopwait;\r\n        onSamplerChanged();\r\n    };\r\n\r\n    const items = Object.keys(samplers).slice(0).reverse().map(samplerName => {\r\n        let sampler = samplers[samplerName];\r\n        let mode = \"\";\r\n        if (sampler.state === SamplerState.stopped) {\r\n            if (editModeSamplers.has(sampler.id)) {\r\n                mode = \"edit\";\r\n            } else {\r\n                mode = \"idle\";\r\n            }\r\n        } else {\r\n            mode = sampler.state;\r\n        }\r\n        let prompt = \"\";\r\n        if (sampler.belongingTask.generationType === GenerationType.prompt) {\r\n            prompt = sampler.belongingTask.originalPrompt;\r\n        }\r\n        let text = sampler.generatedText;\r\n        let params = sampler.belongingTask.modelParams;\r\n        let model = sampler.belongingTask.modelName;\r\n        return (\r\n            <Grid key={samplerName} item>\r\n                <ResultCard\r\n                    samplerName={samplerName}\r\n                    mode={mode}\r\n                    prompt={prompt}\r\n                    text={text}\r\n                    model={model}\r\n                    params={params}\r\n                    onEditModeChange={onEditModeChange}\r\n                    onEditText={onEditText}\r\n                    onGenerate={onGenerate}\r\n                    onStopGenerate={onStopGenerate}\r\n                />\r\n            </Grid>\r\n        )\r\n    });\r\n    return (\r\n        <Grid container spacing={2} direction=\"column\" alignItems=\"stretch\">\r\n            <Slide direction=\"left\" in={items.length <= 0} unmountOnExit appear={false}>\r\n                <Grid item>\r\n                    <Paper className={classes.paper}>\r\n                        <Typography variant=\"h5\" component=\"h2\" align=\"left\" gutterBottom>\r\n                            Quick Start Guide\r\n                        </Typography>\r\n                        <Divider orientation={'horizontal'}/>\r\n                        <Typography variant=\"body1\" component=\"span\">\r\n                            <ol>\r\n                                <li>Select a model of your choice in the Parameters menu</li>\r\n                                <li>Enter some text in the textbox above</li>\r\n                                <li>Click <b>Generate</b></li>\r\n                                <li>Find a story that interests you and click <b>Generate More</b></li>\r\n                                <li>\r\n                                    Stop and Resume the generation or <b>Edit</b> the output before resuming.\r\n                                </li>\r\n                            </ol>\r\n                        </Typography>\r\n                    </Paper>\r\n                </Grid>\r\n            </Slide>\r\n            <Slide direction=\"left\" in={items.length <= 0} unmountOnExit appear={false}>\r\n                <Grid item>\r\n                    <Paper className={classes.paper}>\r\n                        <Typography variant=\"h5\" component=\"h2\" align=\"left\" gutterBottom>\r\n                            Tips and Tricks\r\n                        </Typography>\r\n                        <Divider orientation={'horizontal'}/>\r\n                        <Typography variant=\"body1\" component=\"span\">\r\n                            <Typography variant=\"h6\" component=\"h3\" align=\"left\" className={classes.h3}>\r\n                                Model Parameters\r\n                            </Typography>\r\n                            <ul>\r\n                                <li className={classes.li}>\r\n                                    The default configuration does not filter any tokens before sampling, which\r\n                                    could lead to infrequent / non-related words being generated by a low chance.\r\n                                    You should experiment with <b>top-k/top-p</b> sampling methods by changing the\r\n                                    values in the Parameters menu.\r\n                                </li>\r\n                                <li className={classes.li}>\r\n                                    To start off, we recommend trying the simplest <button onClick={() => {\r\n                                    onModelParametersPresetChanged(\"top-k=50\", {'top_k': 50});\r\n                                }}>top-k=50</button> filtering. Clicking the button will set the sampler to sample only\r\n                                    the top 50 most likely tokens from the model's probability distribution. This will\r\n                                    replace your current settings.\r\n                                </li>\r\n                                <li className={classes.li}>\r\n                                    You can also try mixing sampling methods. If both top-k and top-p sampling is set,\r\n                                    top-p filtering will first be applied. If the remaining number of token exceeds\r\n                                    top-k, the least likely tokens will be filtered so that the number of remaining\r\n                                    tokens is equal or less than k.\r\n                                </li>\r\n                                <li>\r\n                                    You can also try tweaking the temperature value to control the probability\r\n                                    distribution. Lowering the temperature further increase the chance of\r\n                                    high-probability tokens to be generated while increasing the value increases the\r\n                                    chances of low-probability tokens to be generated. If you find the model produce\r\n                                    incoherent results, try reducing the value. If you find the model produce repetitive\r\n                                    results, try increasing the value.\r\n                                </li>\r\n                            </ul>\r\n                            <Typography variant=\"h6\" component=\"h3\" align=\"left\" className={classes.h3}>\r\n                                Generation Types\r\n                            </Typography>\r\n                            <p>You can set the generation type on the top of the page. There are currently 2 modes:</p>\r\n                            <ul>\r\n                                <li className={classes.li}>\r\n                                    <b>Continue Story:</b> The model tries you continue writing from the text you have\r\n                                    inputted in the textbox.\r\n                                </li>\r\n                                <li className={classes.li}>\r\n                                    <b>Writing Prompt:</b> The model tries to write you a story based on the context\r\n                                    given in the textbox. You can try something like <u>Scientists have discovered the\r\n                                    most deadly material</u> instead of thinking for a story opening.\r\n                                </li>\r\n                            </ul>\r\n                        </Typography>\r\n                    </Paper>\r\n                </Grid>\r\n            </Slide>\r\n            {items}\r\n            {/* Uncomment to see all styles of the ResultCard\r\n            <Grid item>\r\n                <ResultCard mode=\"idle\" text={\"Sample Text\"}/>\r\n            </Grid>\r\n            <Grid item>\r\n                <ResultCard mode=\"edit\" text={\"Sample Text\"}/>\r\n            </Grid>\r\n            <Grid item>\r\n                <ResultCard mode=\"waiting\" text={\"Sample Text\"}/>\r\n            </Grid>\r\n            <Grid item>\r\n                <ResultCard mode=\"running\" text={\"Sample Text\"}/>\r\n            </Grid>\r\n            <Grid item>\r\n                <ResultCard mode=\"stopwait\" text={\"Sample Text\"}/>\r\n            </Grid>\r\n            */}\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default ResultCards;","import ModeSelector from './components/ModeSelector'\nimport TextInput from \"./components/TextInput\";\nimport {makeStyles} from \"@material-ui/core\";\nimport {useState, useEffect, useCallback} from 'react'\nimport {io} from \"socket.io-client\"\nimport Box from '@material-ui/core/Box';\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ParameterSelector from \"./components/ParameterSelector\";\nimport ResultCards from \"./components/ResultCards\";\nimport 'fontsource-roboto';\nimport {GenerationType, SamplerState} from \"./Constants\";\nimport {useSnackbar} from 'notistack';\nimport LinearProgress from \"@material-ui/core/LinearProgress/LinearProgress\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport AlertTitle from \"@material-ui/lab/AlertTitle\";\nimport Fade from \"@material-ui/core/Fade\";\n\nclass Task {\n    static tasksCreated = 0;\n    static tasks = {};\n\n    static get_new_id() {\n        return `T${++Task.tasksCreated}`\n    }\n\n    static new_continuation_task(modelName, prefix, model_params) {\n        let new_task = new Task();\n        new_task.id = Task.get_new_id();\n        new_task.modelName = modelName;\n        new_task.generationType = GenerationType.continuation;\n        // The prefix to be sent to the model before generatedText\n        // In a continuation task, prefix is used once only and cleared on subsequent sampling\n        // since only generatedText is needed to be sent to the model\n        new_task.prefix = prefix;\n        new_task.modelParams = model_params;\n        Task.tasks[new_task.id] = new_task;\n        return new_task;\n    }\n\n    static new_prompt_task(modelName, originalPrompt, prefix, model_params) {\n        let new_task = new Task();\n        new_task.id = Task.get_new_id();\n        new_task.modelName = modelName;\n        new_task.generationType = GenerationType.prompt;\n        new_task.originalPrompt = originalPrompt; // The prompt that the user has inputted, for display only\n        new_task.prefix = prefix; // The prefix to be sent to the model before generatedText\n        new_task.modelParams = model_params;\n        Task.tasks[new_task.id] = new_task;\n        return new_task;\n    }\n}\n\nclass Sampler {\n    static samplersCreated = 0;\n    static samplers = {};\n\n    static get_new_id() {\n        return `#${++Sampler.samplersCreated}`\n    }\n\n    static create_sampler(belonging_task) {\n        let new_sampler = new Sampler();\n        new_sampler.id = Sampler.get_new_id();\n        // The task that the story belongs to, contains necessary information for sampling\n        new_sampler.belongingTask = belonging_task;\n        // Results returned by the sampler is stored here\n        new_sampler.generatedText = \"\";\n        // Status of the sampler\n        new_sampler.state = SamplerState.stopped;\n        Sampler.samplers[new_sampler.id] = new_sampler;\n        return new_sampler;\n    }\n}\n\nconst useStyles = makeStyles((theme) => ({\n    grid: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2)\n    },\n    initMsgBox: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        textAlign: 'left'\n    }\n}));\n\nlet disconnectedSnackBar = null;\n\nfunction App() {\n    const [socket, setSocket] = useState(null);\n    const [samplers, setSamplers] = useState({});\n    const [waitingTask, setWaitingTask] = useState(null);\n    const [parameters, setParameters] = useState({});\n    const [modelName, setModelName] = useState(\"gpt2\");\n    const [generationType, setGenerationType] = useState(GenerationType.continuation);\n    const [initialMaxLength, setInitialMaxLength] = useState(20);\n    const [initialMinLength, setInitialMinLength] = useState(10);\n    const [generateSequenceCount, setGenerateSequenceCount] = useState(5);\n    const {enqueueSnackbar, closeSnackbar} = useSnackbar();\n\n    const onGenerateCompleted = (task_name, results) => {\n        let task = Task.tasks[task_name];\n        for (let result in results) {\n            let sampler = Sampler.create_sampler(task);\n            if (results.hasOwnProperty(result)) {\n                sampler.generatedText = results[result];\n                // We add the prefix to generatedText for continuation task as it is the part of the story\n                if (task.generationType === GenerationType.continuation) {\n                    sampler.generatedText = task.prefix + sampler.generatedText;\n                }\n            }\n        }\n        if (task.generationType === GenerationType.continuation) {\n            // Since we have added the prefix as part of the generatedText, we no longer need it in continuation tasks\n            task.prefix = \"\";\n        }\n        setWaitingTask(null);\n        setSamplers({...Sampler.samplers});\n    };\n\n    const onText = (sampler_name, sampled_text, callback) => {\n        Sampler.samplers[sampler_name].generatedText += sampled_text;\n        switch (Sampler.samplers[sampler_name].state) {\n            case SamplerState.waiting:\n                callback(true);\n                Sampler.samplers[sampler_name].state = SamplerState.running;\n                break;\n            case SamplerState.running:\n                callback(true);\n                break;\n            case SamplerState.stopwait:\n                callback(false);\n                Sampler.samplers[sampler_name].state = SamplerState.stopped;\n                break;\n            default:\n                callback(false);\n                Sampler.samplers[sampler_name].state = SamplerState.stopped;\n                console.log(`WARN: Sampler ${sampler_name} in wrong state. Forcefully setting it to stopped state.`);\n        }\n        setSamplers({...Sampler.samplers});\n    };\n\n    const onTextSampleCompleted = (sampler_name) => {\n        Sampler.samplers[sampler_name].state = SamplerState.stopped;\n        setSamplers({...Sampler.samplers});\n    };\n\n    const onDisconnect = (reason) => {\n        console.log(`[NET] Disconnected from server: ${reason}. Cleaning up...`);\n        for (let sampler_name in Sampler.samplers) {\n            if (Sampler.samplers.hasOwnProperty(sampler_name)) {\n                Sampler.samplers[sampler_name].state = SamplerState.stopped;\n            }\n        }\n        setWaitingTask(null);\n        setSocket(null);\n        setSamplers({...Sampler.samplers});\n        if (disconnectedSnackBar === null) {\n            disconnectedSnackBar = enqueueSnackbar(\n                \"Disconnected. Reconnecting...\", {variant: 'warning', autoHideDuration: null}\n            );\n        }\n    };\n\n    const onParametersChanged = useCallback(\n        (modelName, parameters, initialMinLength, initialMaxLength, generateSequenceCount) => {\n            setModelName(modelName);\n            // Caller should create a new object if parameters are meant to be changed\n            setParameters(parameters);\n            setInitialMinLength(initialMinLength);\n            setInitialMaxLength(initialMaxLength);\n            setGenerateSequenceCount(generateSequenceCount);\n        }, []);\n\n    const onSamplerChanged = () => {\n        setSamplers({...Sampler.samplers});\n    };\n\n    const onTextSubmit = (text, promptTag) => {\n        let task;\n        if (generationType === GenerationType.continuation) {\n            task = Task.new_continuation_task(modelName, text, parameters);\n        } else if (generationType === GenerationType.prompt) {\n            let prompt = promptTag + text;\n            task = Task.new_prompt_task(modelName, prompt, `<|endoftext|>${prompt} [RESPONSE] `, parameters);\n        }\n        setWaitingTask(task.id);\n        socket.emit(\n            'generate_text',\n            task.id,\n            task.modelName,\n            task.prefix,\n            initialMaxLength,\n            {...parameters, 'min_length': initialMinLength},\n            generateSequenceCount\n        )\n    };\n\n    const onStartGenerate = (samplerName) => {\n        let sampler = Sampler.samplers[samplerName];\n        if (sampler.state !== SamplerState.stopped) {\n            console.log(`WARN: Sampler ${samplerName} is in not in stopped state (${sampler.state}). Generate command ignored.`)\n            return\n        }\n        sampler.state = SamplerState.waiting;\n        socket.emit(\n            'start_new_sampler',\n            samplerName,\n            sampler.belongingTask.modelName,\n            sampler.belongingTask.prefix + sampler.generatedText,\n            {...sampler.belongingTask.modelParams, 'min_length': initialMinLength}\n        );\n        setSamplers({...Sampler.samplers});\n    };\n\n    useEffect(() => {\n        // componentDidMount\n        let socket;\n        if (window.APILocation) {\n            socket = io(window.APILocation);\n        } else {\n            // If no API location specified, it defaults to the same as the web server\n            socket = io();\n        }\n        socket.on(\"on_generate_completed\", onGenerateCompleted);\n        socket.on(\"on_text\", onText);\n        socket.on(\"on_text_sample_completed\", onTextSampleCompleted);\n        socket.on(\"disconnect\", onDisconnect);\n        socket.on(\"connect\", () => {\n            console.log(`[NET] Connected to server.`);\n            setSocket(socket);\n            if (disconnectedSnackBar != null) {\n                closeSnackbar(disconnectedSnackBar);\n                disconnectedSnackBar = null;\n            }\n            enqueueSnackbar(\"Connected!\", {variant: 'success'});\n        });\n        if (disconnectedSnackBar === null) {\n            disconnectedSnackBar = enqueueSnackbar(\n                \"Connecting to inference API...\",\n                {variant: 'default', transitionDuration: {enter: 1, exit: 136}, autoHideDuration: null}\n            );\n        }\n        // We want to execute once only and we understand that all function will get stale values which is fine\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        console.log(\"[INFO] Selected model:\", modelName);\n    }, [modelName]);\n\n    useEffect(() => {\n        console.log(\"[INFO] Parameters selected: \", parameters);\n    }, [parameters]);\n\n    useEffect(() => {\n        console.log(\n            \"[INFO] Generate options changed: Type:\", generationType,\n            \"MinLength:\", initialMinLength,\n            \"MaxLength:\", initialMaxLength,\n            \"SequenceCount:\", generateSequenceCount\n        )\n    }, [generationType, initialMinLength, initialMaxLength, generateSequenceCount]);\n\n    const classes = useStyles();\n    return (\n        <div className=\"App\">\n            <h1> Creative Story Generator Using GPT-2 </h1>\n            <Container maxWidth=\"xs\">\n                <ModeSelector mode={generationType} onModeChanged={(newMode) => setGenerationType(newMode)}/>\n            </Container>\n            <Container>\n                <Box p={2}>\n                    <TextInput\n                        wait={socket == null || waitingTask != null}\n                        generationType={generationType}\n                        onTextSubmit={onTextSubmit}\n                    />\n                    {socket != null && waitingTask != null && <LinearProgress/>}\n                </Box>\n            </Container>\n            {socket != null && waitingTask != null &&\n            <Fade in={socket != null && waitingTask != null}>\n                <Container>\n                    <Box className={classes.initMsgBox}>\n                        <Alert severity=\"success\">\n                            <AlertTitle><strong>Initializing Model...</strong></AlertTitle>\n                            This could take up to 10 seconds when changing models. Subsequent generation of the same\n                            model will be significantly faster.\n                            {Task.tasks[waitingTask].modelName === \"gpt2\" &&\n                            <span><br/><b>\n                                You have selected the original pretrained gpt2-small model. The model needs to be\n                                downloaded. This might take some additional time.\n                            </b></span>}\n                        </Alert>\n                    </Box>\n                </Container>\n            </Fade>\n            }\n            <Container>\n                <Grid container spacing={2} className={classes.grid}>\n                    <Grid item>\n                        <ParameterSelector\n                            generationType={generationType}\n                            parameters={parameters}\n                            onParametersChanged={onParametersChanged}\n                        />\n                    </Grid>\n                    <Grid item xs>\n                        <ResultCards\n                            samplers={samplers}\n                            onSamplerChanged={onSamplerChanged}\n                            onStartGenerate={onStartGenerate}\n                            onModelParametersPresetChanged={(presetName, params) => {\n                                setParameters(params);\n                                enqueueSnackbar(`Preset applied: ${presetName}`, {\n                                    variant: 'info',\n                                    preventDuplicate: true\n                                })\n                            }}\n                        />\n                    </Grid>\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { SnackbarProvider } from 'notistack';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SnackbarProvider\n        maxSnack={3}\n        anchorOrigin={{horizontal:'right', vertical: 'bottom'}}\n        transitionDuration={{ enter: 157, exit: 136 }}\n        autoHideDuration={3000}\n    >\n      <App />\n    </SnackbarProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}